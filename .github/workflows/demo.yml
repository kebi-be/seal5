##
## Copyright (c) 2024 TUM Department of Electrical and Computer Engineering.
##
## This file is part of Seal5.
## See https://github.com/tum-ei-eda/seal5.git for further info.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

# Seal5 demonstration (also serves as end-to-end testj
name: Usage Demo (Manual)

on:
  workflow_dispatch:
    inputs:
      script:
        description: "Script"
        required: true
        default: "demo.py"
      verbose:
        description: "Verbose (0/1)"
        required: true
        default: "0"
      progress:
        description: "Enable progress bars (0/1)"
        required: true
        default: "1"
      clone_depth:
        description: "Clone Depth (-1 for full clone)"
        required: true
        default: "1"
      # fast:
      #   description: "Fast (0/1)"
      #   required: true
      #   default: "0"
      ignore_error:
        description: "Ignore Errors in TEST stage (0/1)"
        required: true
        default: "1"
      build_config:
        description: "Build Config (debug/release/...)"
        required: true
        default: "release"
      test:
        description: "Run LLVM tests"
        required: true
        default: "1"
      install:
        description: "Install LLVM (and upload as artifact)"
        required: true
        default: "1"
      deploy:
        description: "Install LLVM Sources (and upload as artifact)"
        required: true
        default: "1"
      export:
        description: "Install Seal5 Artifacts (and upload as artifact)"
        required: true
        default: "1"
      # TODO: maybe add Python/OS version here?
# push:
#   branches:
#     - main
# pull_request:
#   branches:
#     - main

jobs:
  demo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install APT packages
      run: |
        sudo apt -qq install -y python3-pip python3-venv cmake make ninja-build
    - name: Initialize Virtualenv
      run: |
        python -m pip install --upgrade pip
        python -m venv .venv
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        pip install -r requirements.txt
        pip list
    - name: Run package creation
      run: |
        source .venv/bin/activate
        pip install -e .
    - name: Determine program
      id: ctx
      run: |
        if [[ "${{ github.event.inputs.script }}" == *.py ]]
        then
            echo "program=python3" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.script }}" == *.sh ]]
        then
            echo "program=bash" >> $GITHUB_OUTPUT
        else
            echo "Invalid file extension!"
            exit 1
        fi
    - name: Run the demo
      run: |
        source .venv/bin/activate
        VERBOSE=${{ github.event.inputs.verbose }} PROGESS=${{ github.event.inputs.progress }} CLONE_DEPTH=${{ github.event.inputs.clone_depth }} BUILD_CONFIG=${{ github.event.inputs.build_config }} IGNORE_ERROR=${{ github.event.inputs.ignore_error }} TEST=${{ github.event.inputs.test }} INSTALL=${{ github.event.inputs.install }} DEPLOY=${{ github.event.inputs.deploy }} EXPORT=${{ github.event.inputs.export }} DEST=/tmp/seal5_llvm ${{ steps.ctx.outputs.program }} examples/${{ github.event.inputs.script }}
    - uses: actions/upload-artifact@v4
      if: "${{ github.event.inputs.export == '1' }}"
      with:
        name: demo-export
        path: /tmp/seal5_llvm.tar.gz
    - uses: actions/upload-artifact@v4
      if: "${{ github.event.inputs.install == '1' }}"
      with:
        name: demo-install
        path: /tmp/seal5_llvm/.seal5/install/${{ github.event.inputs.build_config }}
    - uses: actions/upload-artifact@v4
      if: "${{ github.event.inputs.deploy == '1' }}"
      with:
        name: demo-source
        path: /tmp/seal5_llvm_source.zip
